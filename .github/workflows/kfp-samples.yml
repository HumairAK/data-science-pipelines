name: KFP Samples

on:
  push:
    branches: [master]
  pull_request:
    paths:
      - '.github/resources/**'
      - '.github/workflows/kfp-samples.yml'
      - '.github/workflows/kubeflow-pipelines-integration-v2.yml'
      - 'api/**'
      - 'backend/**'
      - 'samples/**'
      - 'samples/core/dataflow/**'
      - 'samples/core/parameterized_tfx_oss/**'
      - '!**/*.md'
      - '!**/OWNERS'

jobs:
  samples:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s_version: [ "v1.29.2", "v1.31.0" ]
    name: KFP Samples - K8s ${{ matrix.k8s_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Free up space in /dev/root
      run: |
        echo "Disk usage before clean up:"
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        echo "Disk usage after clean up:"
        df -h

#    - name: Create KFP cluster
#      id: create-kfp-cluster
#      uses: ./.github/actions/kfp-cluster
#      with:
#        k8s_version: ${{ matrix.k8s_version }}
#      continue-on-error: true
#
#    - name: Build and upload the sample Modelcar image to Kind
#      id: build-sample-modelcar-image
#      if: ${{ steps.create-kfp-cluster.outcome == 'success' }}
#      run: |
#        docker build -f samples/v2/modelcar/Dockerfile -t registry.domain.local/modelcar:test .
#        kind --name kfp load docker-image registry.domain.local/modelcar:test
#      continue-on-error: true
#
#    - name: Forward API port
#      id: forward-api-port
#      if: ${{ steps.build-sample-modelcar-image.outcome == 'success' }}
#      run: ./.github/resources/scripts/forward-port.sh "kubeflow" "ml-pipeline" 8888 8888
#      continue-on-error: true


    - name: Disk Usage (Root)
      run: df -h /

    - name: Disk Usage (Workspace)
      run: df -h $GITHUB_WORKSPACE

    - name: Largest Directories in Workspace
      run: du -h -d 2 $GITHUB_WORKSPACE | sort -hr | head -n 20

    - name: Runner Temp & Tool Cache Size
      run: |
        echo "::group::/tmp"
        du -sh /tmp/* | sort -hr | head -n 10
        echo "::endgroup::"

        echo "::group::/opt/hostedtoolcache"
        du -sh /opt/hostedtoolcache/* | sort -hr | head -n 10
        echo "::endgroup::"

    - name: Inspect Python cache
      run: |
        echo "::group::~/.cache/pip"
        du -sh ~/.cache/pip || echo "No pip cache found"
        echo "::endgroup::"
        
        echo "::group::__pycache__ folders in workspace"
        find . -type d -name "__pycache__" -exec du -sh {} + | sort -hr | head -n 20
        echo "::endgroup::"
        
        echo "::group::.venv folder (if any)"
        du -sh .venv || echo "No .venv found"
        echo "::endgroup::"

    - name: Install protobuf dependencies & kfp-pipeline-spec
      id: install-protobuf-deps
      uses: ./.github/actions/protobuf

    - name: Install kfp & kfp-kubernetes from source
      id: install-kfp-k8s-deps
      uses: ./.github/actions/kfp-k8s


    - name: Disk Usage (Root)
      run: df -h /

    - name: Inspect Disk Usage - Key Areas
      run: |
        echo "::group::Disk Usage Summary"
        df -h
        echo "::endgroup::"
        
        echo "::group::Top Space Usage in /home/runner"
        du -xh /home/runner | sort -hr | head -n 20
        echo "::endgroup::"
        
        echo "::group::Top Space Usage in /tmp"
        du -xh /tmp | sort -hr | head -n 20
        echo "::endgroup::"
        
        echo "::group::Top Space Usage in /opt/hostedtoolcache"
        du -xh /opt/hostedtoolcache | sort -hr | head -n 20
        echo "::endgroup::"
        
        echo "::group::Top Space Usage in /usr/local"
        du -xh /usr/local | sort -hr | head -n 20
        echo "::endgroup::"



#    - name: Run Samples Tests
#      id: tests
#      if: ${{ steps.forward-api-port.outcome == 'success' }}
#      run: |
#        python3 -u ./samples/v2/sample_test.py
#      continue-on-error: true
#
#    - name: Collect failed logs
#      if: ${{ steps.create-kfp-cluster.outcome != 'success' || steps.forward-api-port.outcome != 'success' || steps.tests.outcome != 'success' }}
#      run: |
#        ./.github/resources/scripts/collect-logs.sh --ns kubeflow --output /tmp/tmp_pod_log.txt
#        exit 1
#
#    - name: Collect test results
#      if: always()
#      uses: actions/upload-artifact@v4
#      with:
#        name: kfp-samples-tests-artifacts-k8s-${{ matrix.k8s_version }}
#        path: /tmp/tmp*/*
